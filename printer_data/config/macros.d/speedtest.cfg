# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
# SOURCE: https://github.com/AndrewEllis93/v2.247_backup_klipper_config/blob/0da73eb53875ac47129f9eef235052f5c08d9b94/test_speed.cfg

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|int %}
    # Bounding box (in case the machine min/maxes are not perfect)
    {% set bound = params.BOUND|default(20)|int %}

    {% set home = params.HOME|default(1)|int %}
    
    # Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
    {% set x_min = printer.toolhead.axis_minimum.x + bound %}
    {% set x_max = printer.toolhead.axis_maximum.x - bound %}
    {% set y_min = printer.toolhead.axis_minimum.y + bound %}
    {% set y_max = printer.toolhead.axis_maximum.y - (bound * 2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Absolute positioning
    
    # Set new limits

    {% if 'XYZ' not in printer.toolhead.homed_axes.upper() or home == 1 %}
        # Home and get position for comparison later:
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %}    
    {% endif %}

    G0 X{x_max} Y{y_max} F{30 * 60}
    G4 P1000 
    GET_POSITION
    SET_VELOCITY_LIMIT VELOCITY={speed} 
    M204 S{accel}

    G90
    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

    {% for i in range(iterations) %}
        # Diagonals
        G0 X{x_min} Y{y_min} F{speed * 60}
        G0 X{x_max} Y{y_max} F{speed * 60}
        G0 X{x_min} Y{y_min} F{speed * 60}
        G0 X{x_max} Y{y_min} F{speed * 60}
        G0 X{x_min} Y{y_max} F{speed * 60}
        G0 X{x_max} Y{y_min} F{speed * 60}
        # Box
        G0 X{x_min} Y{y_min} F{speed * 60}
        G0 X{x_min} Y{y_max} F{speed * 60}
        G0 X{x_max} Y{y_max} F{speed * 60}
        G0 X{x_max} Y{y_min} F{speed * 60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
    {% if home == 1 %}
    # Re-home XY and get position again for comparison:
        G28 X Y
    {% endif %}
    # Go to XY home positions (in case your homing override leaves it elsewhere)
    G0 X{x_max} Y{y_max} F{30 * 60}
    G4 P1000 
    GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED
